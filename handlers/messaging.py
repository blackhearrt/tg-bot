from aiogram import Router, Bot, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message


from utils.database import registered_users, save_chat_ids, ADMIN_IDS, load_admins

router = Router()

@router.message(Command("sendall"))
async def send_broadcast(message: Message, bot: Bot):
    if message.from_user.id not in load_admins():
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏!")
        return

    text = message.text.replace("/sendall", "").strip()
    if not text:
        await message.answer("‚ùå –ù–∞–ø–∏—à—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ `/sendall`")
        return

    success_count, fail_count = 0, 0
    for user_id in list(registered_users.keys()):
        try:
            await bot.send_message(int(user_id), f"üì¢ <b>–û–≥–æ–ª–æ—à–µ–Ω–Ω—è:</b>\n\n{text}", parse_mode="HTML")
            success_count += 1
        except Exception as e:
            print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ {user_id}: {e}")
            del registered_users[user_id]  
            fail_count += 1

    save_chat_ids(registered_users)
    await message.answer(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ: {success_count} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º\n‚ùå –ü–æ–º–∏–ª–∫–∏: {fail_count}")

@router.message(Command("send"))
async def send_private_message(message: Message, bot: Bot):
    if message.from_user.id not in load_admins():
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏!")
        return

    args = message.text.split(maxsplit=2)
    if len(args) < 3:
        await message.answer("‚ùå –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏: `/send ID —Ç–µ–∫—Å—Ç` –∞–±–æ `/send @username —Ç–µ–∫—Å—Ç`")
        return

    target, text = args[1], args[2]

    if target.isdigit():
        user_id = target
    elif target.startswith("@"):  
        user_id = next((uid for uid, uname in registered_users.items() if uname == target[1:]), None)
        if user_id is None:
            await message.answer("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–∞–∫–∏–º —é–∑–µ—Ä–Ω–µ–π–º–æ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return
    else:
        await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ `/send ID —Ç–µ–∫—Å—Ç` –∞–±–æ `/send @username —Ç–µ–∫—Å—Ç`")
        return

    try:
        await bot.send_message(int(user_id), f"‚ö†Ô∏è <b>{text}</b>", parse_mode="HTML")
        await message.answer("‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    except Exception as e:
        await message.answer(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏: {e}")