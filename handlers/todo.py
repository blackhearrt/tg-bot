from aiogram import types, Router, Bot
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram import F
import asyncio
from datetime import datetime

router = Router()

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é —Ç—Ä–µ–∫–µ—Ä–∞ –∑–∞–≤–¥–∞–Ω—å
@router.message(F.text == "‚úÖ –¢—Ä–µ–∫–µ—Ä –∑–∞–≤–¥–∞–Ω—å")
async def todo_keyboard(message: types.Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–ø–∏—Å–∫–∏")],
            [KeyboardButton(text="‚úç –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è")],
            [KeyboardButton(text="‚è∞ –î–µ–¥–ª–∞–π–Ω–∏ —Ç–∞ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è")],
            [KeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )
    
    welcome_text = (
        "üìù <b>–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–∫–µ—Ä–∞!</b>\n\n"
        "–¢—É—Ç –í–∏ –º–æ–∂–µ—Ç–µ –∫–µ—Ä—É–≤–∞—Ç–∏ —Å–≤–æ—ó–º–∏ —Å–ø–∏—Å–∫–∞–º–∏ —Å–ø—Ä–∞–≤:\n"
        "üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–∞ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Å–ø–∏—Å–∫–∏\n"
        "‚úç –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è\n"
        "‚è∞ –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è\n\n"
        "–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:"
    )
    await message.answer(welcome_text, parse_mode="HTML", reply_markup=keyboard)

# –°—Ç–∞–Ω –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å
class TaskCreation(StatesGroup):
    choosing_list = State()
    entering_task = State()

# üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–ø–∏—Å–∫–∏
@router.message(F.text == "üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–ø–∏—Å–∫–∏")
async def view_task_lists(message: types.Message):
    task_lists = ["–†–æ–±–æ—Ç–∞", "–ù–∞–≤—á–∞–Ω–Ω—è", "–û—Å–æ–±–∏—Å—Ç–µ"]  # –ü—ñ–∑–Ω—ñ—à–µ –∑–∞–º—ñ–Ω–∏—Ç—å—Å—è –Ω–∞ –ë–î
    
    if not task_lists:
        await message.answer("‚ùå –£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î —Å–ø–∏—Å–∫—ñ–≤ –∑–∞–≤–¥–∞–Ω—å.")
        return
    
    lists_text = "üìÇ <b>–í–∞—à—ñ —Å–ø–∏—Å–∫–∏:</b>\n\n" + "\n".join([f"üìå {lst}" for lst in task_lists])
    await message.answer(lists_text, parse_mode="HTML")

# ‚úç –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è
@router.message(F.text == "‚úç –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è")
async def add_task_start(message: types.Message, state: FSMContext):
    await state.set_state(TaskCreation.choosing_list)
    await message.answer("üìÇ –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Å–ø–∏—Å–∫—É, –¥–æ —è–∫–æ–≥–æ –¥–æ–¥–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è:")

@router.message(TaskCreation.choosing_list)
async def add_task_choose_list(message: types.Message, state: FSMContext):
    await state.update_data(task_list=message.text)
    await state.set_state(TaskCreation.entering_task)
    await message.answer("üìù –í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –∑–∞–≤–¥–∞–Ω–Ω—è:")

@router.message(TaskCreation.entering_task)
async def add_task_enter_task(message: types.Message, state: FSMContext):
    data = await state.get_data()
    task_list = data.get("task_list")
    task_text = message.text
    
    await message.answer(f"‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è –¥–æ–¥–∞–Ω–æ –¥–æ —Å–ø–∏—Å–∫—É <b>{task_list}</b>:\nüìå {task_text}", parse_mode="HTML")
    await state.clear()

# ‚è∞ –î–µ–¥–ª–∞–π–Ω–∏ —Ç–∞ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
@router.message(F.text == "‚è∞ –î–µ–¥–ª–∞–π–Ω–∏ —Ç–∞ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è")
async def reminders_menu(message: types.Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è")],
            [KeyboardButton(text="‚è∞ –î–æ–¥–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è")],
            [KeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )
    await message.answer("üîî –í–∏–±–µ—Ä—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é:", parse_mode="HTML", reply_markup=keyboard)

reminders = []

@router.message(F.text == "‚è∞ –î–æ–¥–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è")
async def add_reminder_start(message: types.Message, state: FSMContext):
    await state.set_state(TaskCreation.entering_task)
    await message.answer("üìÖ –í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —Ç–∞ —á–∞—Å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è (—Ñ–æ—Ä–º–∞—Ç: –†–†–†–†-–ú–ú-–î–î –ì–ì:–•–•):")

@router.message(TaskCreation.entering_task)
async def add_reminder_time(message: types.Message, state: FSMContext):
    try:
        reminder_time = datetime.strptime(message.text, "%Y-%m-%d %H:%M")
        if reminder_time < datetime.now():
            await message.answer("‚ùå –î–∞—Ç–∞ —É –º–∏–Ω—É–ª–æ–º—É! –í–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —á–∞—Å.")
            return
        await state.update_data(reminder_time=reminder_time)
        await state.set_state(TaskCreation.choosing_list)
        await message.answer("üìù –í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥—ñ—Ç—å —É —Ñ–æ—Ä–º–∞—Ç—ñ: –†–†–†–†-–ú–ú-–î–î –ì–ì:–•–•")

@router.message(TaskCreation.choosing_list)
async def add_reminder_text(message: types.Message, state: FSMContext):
    data = await state.get_data()
    reminder_time = data["reminder_time"]
    
    reminder = {
        "user_id": message.from_user.id,
        "time": reminder_time,
        "text": message.text
    }
    reminders.append(reminder)
    
    await message.answer(f"‚úÖ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ! üìÖ {reminder_time.strftime('%Y-%m-%d %H:%M')}\nüîî {message.text}")
    await state.clear()

async def reminder_checker(bot: Bot):
    while True:
        now = datetime.now()
        for reminder in reminders[:]:
            if reminder["time"] <= now:
                await bot.send_message(reminder["user_id"], f"üîî <b>–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è!</b>\n\n{reminder['text']}", parse_mode="HTML")
                reminders.remove(reminder)
        await asyncio.sleep(30)

async def on_startup():
    asyncio.create_task(reminder_checker())
