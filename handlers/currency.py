from aiogram import types, Router
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
import requests
from datetime import datetime

router = Router()

@router.message(Command("currency"))
@router.message(lambda message: message.text == "üìä –ö—É—Ä—Å –≤–∞–ª—é—Ç")
async def currency(message: Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üí≤ –û—Ç—Ä–∏–º–∞—Ç–∏ –∫—É—Ä—Å –≤–∞–ª—é—Ç–∏")],
            [KeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )
    await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é:", reply_markup=keyboard)

@router.message(lambda message: message.text == "üí≤ –û—Ç—Ä–∏–º–∞—Ç–∏ –∫—É—Ä—Å –≤–∞–ª—é—Ç–∏")
async def show_currency_menu(message: types.Message):
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –≤–∞–ª—é—Ç—É:", reply_markup=currency_keyboard())

def currency_keyboard():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üíµ USD", callback_data="currency_usd")],
            [InlineKeyboardButton(text="üí¥ EUR", callback_data="currency_eur")],
            [InlineKeyboardButton(text="üáµüá± PLN", callback_data="currency_pln")],
            [InlineKeyboardButton(text="üá¨üáß GBP", callback_data="currency_gbp")]
        ]
    )
    return keyboard

@router.callback_query(lambda c: c.data.startswith("currency_"))
async def get_currency(callback: types.CallbackQuery):
    currency_code = callback.data.split("_")[1].upper()

    currency_map = {
        840: "USD",  # –î–æ–ª–∞—Ä –°–®–ê
        978: "EUR",  # –Ñ–≤—Ä–æ
        985: "PLN",  # –ü–æ–ª—å—Å—å–∫–∏–π –∑–ª–æ—Ç–∏–π
        826: "GBP"  # –§—É–Ω—Ç –±—Ä–∏—Ç–∞–Ω—Å—å–∫–∏–π      
    }

    if currency_code not in currency_map.values():
        await callback.answer("‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –≤–∞–ª—é—Ç–∞")
        return

    url = "https://api.monobank.ua/bank/currency"
    response = requests.get(url)

    if response.status_code != 200:
        await callback.message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫—É—Ä—Å –≤–∞–ª—é—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return
    
    data = response.json()
    now = datetime.now().strftime("%Y-%m-%d %H:%M")

    for item in data:
        if item["currencyCodeA"] in currency_map and item["currencyCodeB"] == 980:  # UAH
            if currency_map[item["currencyCodeA"]] == currency_code: 
                rate_buy = item.get("rateBuy", "‚ùå –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö") 
                rate_sell = item.get("rateSell", "‚ùå –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö")
                if isinstance(rate_buy, (int, float)):
                    rate_buy = round(rate_buy, 2)
                if isinstance(rate_sell, (int, float)):
                    rate_sell = round(rate_sell, 2)

                message_text = (
                    f"üí± <b>–ö—É—Ä—Å {currency_code} —Å—Ç–∞–Ω–æ–º –Ω–∞ {now}</b>\n\n"
                    f"<b>{currency_code}:</b> –ö—É–ø—ñ–≤–ª—è: {rate_buy} –≥—Ä–Ω | –ü—Ä–æ–¥–∞–∂: {rate_sell} –≥—Ä–Ω"
                )

                if rate_buy == "‚ùå –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö" or rate_sell == "‚ùå –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö":
                    rate_cross = item.get("rateCross", "‚ùå –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö")
                    if isinstance(rate_cross, (int, float)):
                        rate_cross = round(rate_cross, 2)
                    message_text = (
                        f"üí± <b>–ö—É—Ä—Å {currency_code} —Å—Ç–∞–Ω–æ–º –Ω–∞ {now}</b>\n\n"
                        f"<b>{currency_code}:</b> {rate_cross} –≥—Ä–Ω"
                    )

                await callback.message.answer(message_text, parse_mode="HTML")
                return 

    await callback.message.answer("‚ùå –ö—É—Ä—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")