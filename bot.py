import asyncio
import os
import requests
from dotenv import load_dotenv
from datetime import datetime
from aiogram import Bot, Dispatcher, types, Router, F, html
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode



load_dotenv() 
BOT_TOKEN = os.getenv("BOT_TOKEN")
TOKEN = BOT_TOKEN

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
router = Router()

now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

def get_time_info():
    now = datetime.now()
    days_of_week = {
        0: "–ü–æ–Ω–µ–¥—ñ–ª–æ–∫", 1: "–í—ñ–≤—Ç–æ—Ä–æ–∫", 2: "–°–µ—Ä–µ–¥–∞", 3: "–ß–µ—Ç–≤–µ—Ä",
        4: "–ü'—è—Ç–Ω–∏—Ü—è", 5: "–°—É–±–æ—Ç–∞", 6: "–ù–µ–¥—ñ–ª—è"
    }
    day_name = days_of_week[now.weekday()]
    formatted_time = now.strftime("%H:%M")
    formatted_day = now.strftime("%d.%m.%Y")

    return f"{day_name}, {formatted_time} | {formatted_day}"

def get_greeting():
   
    now = datetime.now().time()  
    
    if now >= datetime.strptime("05:01", "%H:%M").time() and now <= datetime.strptime("11:30", "%H:%M").time():
        return "–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É"
    elif now >= datetime.strptime("11:31", "%H:%M").time() and now <= datetime.strptime("16:30", "%H:%M").time():
        return "–î–æ–±—Ä–æ–≥–æ –¥–Ω—è"
    elif now >= datetime.strptime("16:31", "%H:%M").time() and now <= datetime.strptime("23:00", "%H:%M").time():
        return "–î–æ–±—Ä–æ–≥–æ –≤–µ—á–æ—Ä–∞"
    else:
        return "–î–æ–±—Ä–æ—ó –Ω–æ—á—ñ"

def currency_keyboard():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard = [
            [InlineKeyboardButton(text="üíµ USD", callback_data="currency_usd")],
            [InlineKeyboardButton(text="üí¥ EUR", callback_data="currency_eur")],
            [InlineKeyboardButton(text="üáµüá± PLN", callback_data="currency_pln")]
        ]
    )
    return keyboard

@dp.message(Command("start"))
async def update_time_auto(message: Message):
    while True:
        time_info = get_time_info()  # –û—Ç—Ä–∏–º—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π —á–∞—Å
        try:
            await message.edit_text(
                f"üìÖ {time_info}\n\n"
                "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
                reply_markup=message.reply_markup  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏
            )
        except Exception:
            break  # –Ø–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ –∞–±–æ –±–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ, –∑—É–ø–∏–Ω—è—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        await asyncio.sleep(60)  # –ß–µ–∫–∞—î–º–æ 60 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–∏–º –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º

async def start_cmd(message: Message):
    greeting = get_greeting()
    time_info = get_time_info()
    username = message.from_user.full_name or "—à–∞–Ω–æ–≤–Ω–∏–π"
    keyboard = ReplyKeyboardMarkup(
        keyboard = [
            [KeyboardButton(text = "üìä –ö—É—Ä—Å –≤–∞–ª—é—Ç")],
            [KeyboardButton(text = "‚úÖ TODO-–ª—ñ—Å—Ç")],
            [KeyboardButton(text = "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]
        ],
        resize_keyboard= True
    )
    sent_message = await message.answer(
        f"üìÖ {time_info}\n\n"
        f"üëã {greeting}, {html.bold(username)}!  –Ø–∫—ñ –ø–ª–∞–Ω–∏ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ?\n\n", 
        reply_markup = keyboard
    )
    asyncio.create_task(update_time_auto(sent_message))


@dp.message(F.text =="üìä –ö—É—Ä—Å –≤–∞–ª—é—Ç")
async def currency(message: Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard = [
            [KeyboardButton(text = "üí≤ –û—Ç—Ä–∏–º–∞—Ç–∏ –∫—É—Ä—Å –≤–∞–ª—é—Ç–∏")],
            [KeyboardButton(text = "‚¨Ö –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard = True
    )
    await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é:", reply_markup = keyboard)

@dp.message(F.text == "üí≤ –û—Ç—Ä–∏–º–∞—Ç–∏ –∫—É—Ä—Å –≤–∞–ª—é—Ç–∏")
async def show_currency_menu(message: types.Message):
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –≤–∞–ª—é—Ç—É:", reply_markup=currency_keyboard())

@dp.callback_query(F.data.startswith("currency_"))    
async def get_currency(callback: types.CallbackQuery):
   
    currency_code = callback.data.split("_")[1].upper()

    currency_map = {
        840: "USD",  # –î–æ–ª–∞—Ä –°–®–ê
        978: "EUR",  # –Ñ–≤—Ä–æ
        985: "PLN",  # –ü–æ–ª—å—Å—å–∫–∏–π –∑–ª–æ—Ç–∏–π
    }

    if currency_code not in currency_map.values():
        await callback.answer("‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –≤–∞–ª—é—Ç–∞")
        return

    url = "https://api.monobank.ua/bank/currency"
    response = requests.get(url)

    if response.status_code != 200:
        await callback.message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫—É—Ä—Å –≤–∞–ª—é—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return
    
    data = response.json()

    for item in data:
        if item["currencyCodeA"] in currency_map and item["currencyCodeB"] == 980:  # UAH
            rate_buy = item.get("rateBuy", "‚ùå –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö") 
            rate_sell = item.get("rateSell", "‚ùå –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö")

            message_text = f"üí± <b>–ö—É—Ä—Å {currency_code} —Å—Ç–∞–Ω–æ–º –Ω–∞ {now}</b>\n\n"
            message_text += f"<b>{currency_code}:</b> –ö—É–ø—ñ–≤–ª—è: {rate_buy} | –ü—Ä–æ–¥–∞–∂: {rate_sell}"           

        await callback.message.answer(message_text, parse_mode="HTML")
        return
    await callback.message.answer("‚ùå –ö—É—Ä—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

@dp.message(F.text == "‚úÖ TODO-–ª—ñ—Å—Ç")
async def todo_keyboard(message: types.Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard = [
            [KeyboardButton(text = "‚úçüìã–°–ø–∏—Å–æ–∫ —Å–ø—Ä–∞–≤")],
            [KeyboardButton(text = "‚¨Ö –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard = True
    )
    await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é:", reply_markup = keyboard)

@dp.message(F.text == "‚¨Ö –ù–∞–∑–∞–¥")
async def back(message: types.Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard = [
            [KeyboardButton(text = "üìä –ö—É—Ä—Å –≤–∞–ª—é—Ç")],
            [KeyboardButton(text = "‚úÖ TODO-–ª—ñ—Å—Ç")],
            [KeyboardButton(text = "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]
        ],
        resize_keyboard = True
    )
    await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é:", reply_markup = keyboard)

@dp.message(F.text == "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
async def main_menu(message: types.Message):
    greeting = get_greeting()
    time_info = get_time_info()
    username = message.from_user.full_name or "—à–∞–Ω–æ–≤–Ω–∏–π"
    keyboard = ReplyKeyboardMarkup(
        keyboard = [
            [KeyboardButton(text = "üìä –ö—É—Ä—Å –≤–∞–ª—é—Ç")],
            [KeyboardButton(text = "‚úÖ TODO-–ª—ñ—Å—Ç")],
            [KeyboardButton(text = "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]
        ],
        resize_keyboard= True
    )
    sent_message = await message.answer(
        f"üìÖ {time_info}\n\n"
        f"üëã {greeting}, {html.bold(username)}!  –Ø–∫—ñ –ø–ª–∞–Ω–∏ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ?\n\n", 
        reply_markup = keyboard
    )
    asyncio.create_task(update_time_auto(sent_message))


@dp.message(F.text =="üìä –ö—É—Ä—Å –≤–∞–ª—é—Ç")
async def currency(message: Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard = [
            [KeyboardButton(text = "üí≤ –û—Ç—Ä–∏–º–∞—Ç–∏ –∫—É—Ä—Å –≤–∞–ª—é—Ç–∏")],
            [KeyboardButton(text = "‚¨Ö –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard = True
    )
    await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é:", reply_markup = keyboard)

async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())

