import asyncio
import os
import requests
from dotenv import load_dotenv
from datetime import datetime
from aiogram import Bot, Dispatcher, types, Router, F, html
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, Message
from aiogram.enums import ParseMode



load_dotenv() 
BOT_TOKEN = os.getenv("BOT_TOKEN")
TOKEN = BOT_TOKEN

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
router = Router()

now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

@dp.message(Command('start'))
async def start_cmd(message: Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard = [
            [KeyboardButton(text = "üìä –ö—É—Ä—Å –≤–∞–ª—é—Ç")],
            [KeyboardButton(text = "‚úÖ TODO-–ª—ñ—Å—Ç")],
            [KeyboardButton(text = "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]
        ],
        resize_keyboard= True
    )
    await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é:", reply_markup = keyboard)

@dp.message(F.text =="üìä –ö—É—Ä—Å –≤–∞–ª—é—Ç")
async def currency_keyboard(message: Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard = [
            [KeyboardButton(text = "üí≤ –û—Ç—Ä–∏–º–∞—Ç–∏ –∫—É—Ä—Å –≤–∞–ª—é—Ç–∏")],
            [KeyboardButton(text = "‚¨Ö –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard= True
    )
    await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é:", reply_markup = keyboard)

@dp.message(F.text == "üí≤ –û—Ç—Ä–∏–º–∞—Ç–∏ –∫—É—Ä—Å –≤–∞–ª—é—Ç–∏")
async def get_currency(message: types.Message):
    url = "https://api.monobank.ua/bank/currency"
    response = requests.get(url)

    if response.status_code != 200:
        await message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫—É—Ä—Å –≤–∞–ª—é—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return
    
    data = response.json()

    currency_map = {
        840: "USD",  # –î–æ–ª–∞—Ä –°–®–ê
        978: "EUR",  # –Ñ–≤—Ä–æ
        985: "PLN",  # –ü–æ–ª—å—Å—å–∫–∏–π –∑–ª–æ—Ç–∏–π
    }

    message_text = f"üí± <b>–ö—É—Ä—Å –≤–∞–ª—é—Ç —Å—Ç–∞–Ω–æ–º –Ω–∞ {now}</b>\n\n"
    for item in data:
        if item["currencyCodeA"] in currency_map and item["currencyCodeB"] == 980:  # UAH
            currency_name = currency_map[item["currencyCodeA"]]
            rate_buy = item.get("rateBuy", "‚ùå –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö")
            rate_sell = item.get("rateSell", "‚ùå –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö")
            message_text += f"<b>{currency_name}:</b> –ö—É–ø—ñ–≤–ª—è: {rate_buy} | –ü—Ä–æ–¥–∞–∂: {rate_sell}\n"

    await message.answer(message_text, parse_mode="HTML")


@dp.message(F.text == "‚úÖ TODO-–ª—ñ—Å—Ç")
async def todo_keyboard(message: types.Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard = [
            [KeyboardButton(text = "‚úçüìã–°–ø–∏—Å–æ–∫ —Å–ø—Ä–∞–≤")],
            [KeyboardButton(text = "‚¨Ö –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard= True
    )
    await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é:", reply_markup = keyboard)

@dp.message(F.text == "‚¨Ö –ù–∞–∑–∞–¥")
async def back(message: types.Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard = [
            [KeyboardButton(text = "üìä –ö—É—Ä—Å –≤–∞–ª—é—Ç")],
            [KeyboardButton(text = "‚úÖ TODO-–ª—ñ—Å—Ç")],
            [KeyboardButton(text = "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]
        ],
        resize_keyboard= True
    )
    await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é:", reply_markup = keyboard)

@dp.message(F.text == "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
async def main_menu(message: types.Message):
    username = message.from_user.full_name or "—à–∞–Ω–æ–≤–Ω–∏–π"
    keyboard = ReplyKeyboardMarkup(
        keyboard = [
            [KeyboardButton(text = "üìä –ö—É—Ä—Å –≤–∞–ª—é—Ç")],
            [KeyboardButton(text = "‚úÖ TODO-–ª—ñ—Å—Ç")],
            [KeyboardButton(text = "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]
        ],
        resize_keyboard= True
    )
    await message.answer(f"–î–æ–±—Ä–æ–≥–æ –¥–Ω—è, {html.bold(username)}! –Ø–∫—ñ –ø–ª–∞–Ω–∏ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ?", reply_markup = keyboard)

async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())

