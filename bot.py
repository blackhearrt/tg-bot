import asyncio
import os
import requests
import json
from pathlib import Path
from dotenv import load_dotenv
from datetime import datetime
from aiogram import Bot, Dispatcher, types, Router, F, html
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State



load_dotenv() 
BOT_TOKEN = os.getenv("BOT_TOKEN")
TOKEN = BOT_TOKEN

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
router = Router()

now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

USER_IDS_FILE = Path(__file__).parent / "user_ids.json"

def load_chat_ids():
    if not USER_IDS_FILE.exists():
        return {}  
    try:
        with open(USER_IDS_FILE, "r", encoding="utf-8") as file:
            return json.load(file)  
    except json.JSONDecodeError:
        return {} 

def save_chat_ids(user_data):
    with open(USER_IDS_FILE, "w", encoding="utf-8") as file:
        json.dump(user_data, file, indent=4, ensure_ascii=False)

ADMIN_FILE = Path(__file__).parent / "admins.json"

def load_admins():
    if not ADMIN_FILE.exists():
        return set()
    try:
        with open(ADMIN_FILE, "r", encoding="utf-8") as file:
            data = json.load(file)
            return set(data.get("admins", []))
    except json.JSONDecodeError:
        return set()

def save_admins(admins):
    with open(ADMIN_FILE, "w", encoding="utf-8") as file:
        json.dump({"admins": list(admins)}, file, indent=4, ensure_ascii=False)

ADMIN_IDS = load_admins()

@dp.message(Command("addadmin"))
async def add_admin(message: types.Message):
    global ADMIN_IDS
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏!")
        return
    
    try:
        new_admin_id = int(message.text.split()[1])
        if new_admin_id in ADMIN_IDS:
            await message.answer("‚úÖ –¶–µ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            return

        ADMIN_IDS.add(new_admin_id)
        save_admins(ADMIN_IDS)
        await message.answer(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {new_admin_id} –¥–æ–¥–∞–Ω–∏–π –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤.")
    except (IndexError, ValueError):
        await message.answer("‚ùå –í–∫–∞–∂—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞! –ù–∞–ø—Ä–∏–∫–ª–∞–¥: /addadmin 123456789")

@dp.message(Command("removeadmin"))
async def remove_admin(message: types.Message):
    global ADMIN_IDS
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏!")
        return

    try:
        admin_id = int(message.text.split()[1])
        if admin_id not in ADMIN_IDS:
            await message.answer("‚ùå –¶–µ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            return

        ADMIN_IDS.remove(admin_id)
        save_admins(ADMIN_IDS)
        await message.answer(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {admin_id} –≤–∏–¥–∞–ª–µ–Ω–∏–π –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤.")
    except (IndexError, ValueError):
        await message.answer("‚ùå –í–∫–∞–∂—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞! –ù–∞–ø—Ä–∏–∫–ª–∞–¥: /removeadmin 123456789")

@dp.message(Command("admins"))
async def show_admins(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏!")
        return
    
    if not ADMIN_IDS:
        await message.answer("‚Ñπ –°–ø–∏—Å–æ–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
    else:
        admins_list = "\n".join([f"üîπ {admin_id}" for admin_id in ADMIN_IDS])
        await message.answer(f"üìã <b>–°–ø–∏—Å–æ–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤:</b>\n{admins_list}", parse_mode="HTML")

registered_users = load_chat_ids()


@dp.message(Command("sendall"))
async def send_broadcast(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏!")
        return

    text = message.text.replace("/sendall", "").strip()
    if not text:
        await message.answer("‚ùå –ù–∞–ø–∏—à—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ `/sendall`")
        return

    success_count, fail_count = 0, 0
    for user_id in list(registered_users.keys()):  
        try:
            await bot.send_message(int(user_id), f"üì¢ <b>–û–≥–æ–ª–æ—à–µ–Ω–Ω—è:</b>\n\n{text}", parse_mode="HTML")
            success_count += 1
        except Exception as e:
            print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ {user_id}: {e}")
            del registered_users[user_id]  
            fail_count += 1

    save_chat_ids(registered_users) 
    await message.answer(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ: {success_count} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º\n‚ùå –ü–æ–º–∏–ª–∫–∏: {fail_count}")

@dp.message(Command("send"))
async def send_private_message(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏!")
        return

    args = message.text.split(maxsplit=2)  
    if len(args) < 3:
        await message.answer("‚ùå –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏: `/send ID —Ç–µ–∫—Å—Ç` –∞–±–æ `/send @username —Ç–µ–∫—Å—Ç`")
        return

    target, text = args[1], args[2]

    if target.isdigit():  
        user_id = target  
    elif target.startswith("@"):  
        user_id = next((uid for uid, uname in registered_users.items() if uname == target[1:]), None)
        if user_id is None:
            await message.answer("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–∞–∫–∏–º —é–∑–µ—Ä–Ω–µ–π–º–æ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return
    else:
        await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ `/send ID —Ç–µ–∫—Å—Ç` –∞–±–æ `/send @username —Ç–µ–∫—Å—Ç`")
        return

    try:
        await bot.send_message(int(user_id), f"‚ö†Ô∏è <b>–°–ª—É–∂–±–∞ –ë–µ–∑–ø–µ–∫–∏ –£–∫—Ä–∞—ó–Ω–∏ –Ω–∞–≥–∞–¥—É—î –≥—Ä–æ–º–∞–¥—è–Ω—Ü—ñ –ì–æ—Ä–¥—ñ—î–Ω–∫–æ –û–ª–µ–Ω—ñ –ú–∏–∫–æ–ª–∞—ó–≤–Ω—ñ:</b>\n{text}", parse_mode="HTML")
        await message.answer("‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    except Exception as e:
        await message.answer(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏: {e}")

def get_time_info():
    now = datetime.now()
    days_of_week = {
        0: "–ü–æ–Ω–µ–¥—ñ–ª–æ–∫", 1: "–í—ñ–≤—Ç–æ—Ä–æ–∫", 2: "–°–µ—Ä–µ–¥–∞", 3: "–ß–µ—Ç–≤–µ—Ä",
        4: "–ü'—è—Ç–Ω–∏—Ü—è", 5: "–°—É–±–æ—Ç–∞", 6: "–ù–µ–¥—ñ–ª—è"
    }
    day_name = days_of_week[now.weekday()]
    formatted_time = now.strftime("%H:%M")
    formatted_day = now.strftime("%d.%m.%Y")

    return f"{day_name}, {formatted_time} | {formatted_day}"

def get_greeting():
   
    now = datetime.now().time()  
    
    if now >= datetime.strptime("05:01", "%H:%M").time() and now <= datetime.strptime("11:30", "%H:%M").time():
        return "–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É"
    elif now >= datetime.strptime("11:31", "%H:%M").time() and now <= datetime.strptime("16:30", "%H:%M").time():
        return "–î–æ–±—Ä–æ–≥–æ –¥–Ω—è"
    elif now >= datetime.strptime("16:31", "%H:%M").time() and now <= datetime.strptime("23:00", "%H:%M").time():
        return "–î–æ–±—Ä–æ–≥–æ –≤–µ—á–æ—Ä–∞"
    else:
        return "–î–æ–±—Ä–æ—ó –Ω–æ—á—ñ"


@dp.message(Command("start"))
async def start_cmd(message: Message):
    user_chat_ids = load_chat_ids()  
    user_id = str(message.chat.id)  
    username = message.from_user.username or message.from_user.full_name  
    
    user_chat_ids[user_id] = username

    save_chat_ids(user_chat_ids) 
    greeting = get_greeting()
    time_info = get_time_info()
    username = message.from_user.full_name or "—à–∞–Ω–æ–≤–Ω–∏–π"
    keyboard = ReplyKeyboardMarkup(
        keyboard = [
            [KeyboardButton(text = "üìä –ö—É—Ä—Å –≤–∞–ª—é—Ç")],
            [KeyboardButton(text = "‚úÖ –¢—Ä–µ–∫–µ—Ä –∑–∞–≤–¥–∞–Ω—å")],
            [KeyboardButton(text = "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]
        ],
        resize_keyboard= True
    )
    sent_message = await message.answer(
        f"üìÖ {time_info}\n\n"
        f"üëã {greeting}, {html.bold(username)}! –Ø–∫—ñ –ø–ª–∞–Ω–∏ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ?\n\n", 
        reply_markup = keyboard
    )

@dp.message(F.text =="üìä –ö—É—Ä—Å –≤–∞–ª—é—Ç")
async def currency(message: Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard = [
            [KeyboardButton(text = "üí≤ –û—Ç—Ä–∏–º–∞—Ç–∏ –∫—É—Ä—Å –≤–∞–ª—é—Ç–∏")],
            [KeyboardButton(text = "‚¨Ö –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard = True
    )
    await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é:", reply_markup = keyboard)

@dp.message(F.text == "üí≤ –û—Ç—Ä–∏–º–∞—Ç–∏ –∫—É—Ä—Å –≤–∞–ª—é—Ç–∏")
async def show_currency_menu(message: types.Message):
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –≤–∞–ª—é—Ç—É:", reply_markup=currency_keyboard())

def currency_keyboard():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard = [
            [InlineKeyboardButton(text="üíµ USD", callback_data="currency_usd")],
            [InlineKeyboardButton(text="üí¥ EUR", callback_data="currency_eur")],
            [InlineKeyboardButton(text="üáµüá± PLN", callback_data="currency_pln")],
            [InlineKeyboardButton(text="üá¨üáß GBP", callback_data="currency_gbp")]
        ]
    )
    return keyboard

@dp.callback_query(F.data.startswith("currency_"))    
async def get_currency(callback: types.CallbackQuery):
    currency_code = callback.data.split("_")[1].upper()

    currency_map = {
        840: "USD",  # –î–æ–ª–∞—Ä –°–®–ê
        978: "EUR",  # –Ñ–≤—Ä–æ
        985: "PLN",  # –ü–æ–ª—å—Å—å–∫–∏–π –∑–ª–æ—Ç–∏–π
        826: "GBP"  # –§—É–Ω—Ç –±—Ä–∏—Ç–∞–Ω—Å—å–∫–∏–π      
    }

    if currency_code not in currency_map.values():
        await callback.answer("‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –≤–∞–ª—é—Ç–∞")
        return

    url = "https://api.monobank.ua/bank/currency"
    response = requests.get(url)

    if response.status_code != 200:
        await callback.message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫—É—Ä—Å –≤–∞–ª—é—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return
    
    data = response.json()
    # print(data)  üü¢ –õ–æ–≥—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö –∫—É—Ä—Å—ñ–≤
    now = datetime.now().strftime("%Y-%m-%d %H:%M")

    for item in data:
        if item["currencyCodeA"] in currency_map and item["currencyCodeB"] == 980:  # UAH
            if currency_map[item["currencyCodeA"]] == currency_code: 
                rate_buy = item.get("rateBuy", "‚ùå –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö") 
                rate_sell = item.get("rateSell", "‚ùå –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö")
                if isinstance(rate_buy, (int, float)):
                    rate_buy = round(rate_buy, 2)
                if isinstance(rate_sell, (int, float)):
                    rate_sell = round(rate_sell, 2)


                message_text = (
                    f"üí± <b>–ö—É—Ä—Å {currency_code} —Å—Ç–∞–Ω–æ–º –Ω–∞ {now}</b>\n\n"
                    f"<b>{currency_code}:</b> –ö—É–ø—ñ–≤–ª—è: {rate_buy} –≥—Ä–Ω | –ü—Ä–æ–¥–∞–∂: {rate_sell} –≥—Ä–Ω"
                )

                if rate_buy == "‚ùå –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö" or rate_sell == "‚ùå –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö":
                    rate_cross = item.get("rateCross", "‚ùå –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö")
                    if isinstance(rate_cross, (int, float)):
                        rate_cross = round(rate_cross, 2)
                    message_text = (
                        f"üí± <b>–ö—É—Ä—Å {currency_code} —Å—Ç–∞–Ω–æ–º –Ω–∞ {now}</b>\n\n"
                        f"<b>{currency_code}:</b> {rate_cross} –≥—Ä–Ω"
                    )

                await callback.message.answer(message_text, parse_mode="HTML")
                return 

    await callback.message.answer("‚ùå –ö—É—Ä—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

@dp.message(F.text == "‚úÖ –¢—Ä–µ–∫–µ—Ä –∑–∞–≤–¥–∞–Ω—å")
async def todo_keyboard(message: types.Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–ø–∏—Å–∫–∏")],
            [KeyboardButton(text="‚úç –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è")],
            [KeyboardButton(text="‚è∞ –î–µ–¥–ª–∞–π–Ω–∏ —Ç–∞ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è")],
            [KeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

    welcome_text = (
        "üìù <b>–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–∫–µ—Ä–∞!</b>\n\n"
        "–¢—É—Ç –í–∏ –º–æ–∂–µ—Ç–µ –∫–µ—Ä—É–≤–∞—Ç–∏ —Å–≤–æ—ó–º–∏ —Å–ø–∏—Å–∫–∞–º–∏ —Å–ø—Ä–∞–≤:\n"
        "üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–∞ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Å–ø–∏—Å–∫–∏\n"
        "‚úç –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è\n"
        "‚è∞ –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è\n\n"
        "–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:"
    )

    await message.answer(welcome_text, parse_mode="HTML", reply_markup=keyboard)

class TaskCreation(StatesGroup):
    choosing_list = State()
    entering_task = State()

# üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–ø–∏—Å–∫–∏
@dp.message(F.text == "üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–ø–∏—Å–∫–∏")
async def view_task_lists(message: types.Message):
    # –¢–∏–º—á–∞—Å–æ–≤—ñ —Å–ø–∏—Å–∫–∏ (–ø–æ—Ç—ñ–º –±—É–¥–µ –ë–î)
    task_lists = ["–†–æ–±–æ—Ç–∞", "–ù–∞–≤—á–∞–Ω–Ω—è", "–û—Å–æ–±–∏—Å—Ç–µ"]
    
    if not task_lists:
        await message.answer("‚ùå –£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î —Å–ø–∏—Å–∫—ñ–≤ –∑–∞–≤–¥–∞–Ω—å.")
        return
    
    lists_text = "üìÇ <b>–í–∞—à—ñ —Å–ø–∏—Å–∫–∏:</b>\n\n" + "\n".join([f"üìå {lst}" for lst in task_lists])
    await message.answer(lists_text, parse_mode="HTML")

# ‚úç –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è (–ø–æ—á–∞—Ç–æ–∫ –¥—ñ–∞–ª–æ–≥—É)
@dp.message(F.text == "‚úç –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è")
async def add_task_start(message: types.Message, state: FSMContext):
    await state.set_state(TaskCreation.choosing_list)
    await message.answer("üìÇ –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Å–ø–∏—Å–∫—É, –¥–æ —è–∫–æ–≥–æ –¥–æ–¥–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è:")

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–∑–≤–∏ —Å–ø–∏—Å–∫—É
@dp.message(TaskCreation.choosing_list)
async def add_task_choose_list(message: types.Message, state: FSMContext):
    await state.update_data(task_list=message.text)
    await state.set_state(TaskCreation.entering_task)
    await message.answer("üìù –í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –∑–∞–≤–¥–∞–Ω–Ω—è:")

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –∑–∞–≤–¥–∞–Ω–Ω—è
@dp.message(TaskCreation.entering_task)
async def add_task_enter_task(message: types.Message, state: FSMContext):
    data = await state.get_data()
    task_list = data.get("task_list")
    task_text = message.text

    # –¢—É—Ç –ø—ñ–∑–Ω—ñ—à–µ –∑–±–µ—Ä–µ–∂—É —É –ë–î
    await message.answer(f"‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è –¥–æ–¥–∞–Ω–æ –¥–æ —Å–ø–∏—Å–∫—É <b>{task_list}</b>:\nüìå {task_text}", parse_mode="HTML")
    
    await state.clear()

# ‚è∞ –î–µ–¥–ª–∞–π–Ω–∏ —Ç–∞ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è (–ø–æ–∫–∏ —â–æ –ø—Ä–æ—Å—Ç–æ –º–µ–Ω—é)
@dp.message(F.text == "‚è∞ –î–µ–¥–ª–∞–π–Ω–∏ —Ç–∞ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è")
async def reminders_menu(message: types.Message):
    await message.answer("üîî –¢—É—Ç –±—É–¥–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å.")



@dp.message(F.text == "‚¨Ö –ù–∞–∑–∞–¥")
async def back(message: types.Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard = [
            [KeyboardButton(text = "üìä –ö—É—Ä—Å –≤–∞–ª—é—Ç")],
            [KeyboardButton(text = "‚úÖ –¢—Ä–µ–∫–µ—Ä –∑–∞–≤–¥–∞–Ω—å")],
            [KeyboardButton(text = "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]
        ],
        resize_keyboard = True
    )
    await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é:", reply_markup = keyboard)

@dp.message(F.text == "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
async def main_menu(message: types.Message):
    user_chat_ids = load_chat_ids()
    user_id = str(message.chat.id) 
    username = message.from_user.username or message.from_user.full_name  

    user_chat_ids[user_id] = username

    save_chat_ids(user_chat_ids)
    greeting = get_greeting()
    time_info = get_time_info()
    username = message.from_user.full_name or "—à–∞–Ω–æ–≤–Ω–∏–π"
    keyboard = ReplyKeyboardMarkup(
        keyboard = [
            [KeyboardButton(text = "üìä –ö—É—Ä—Å –≤–∞–ª—é—Ç")],
            [KeyboardButton(text = "‚úÖ –¢—Ä–µ–∫–µ—Ä –∑–∞–≤–¥–∞–Ω—å")],
            [KeyboardButton(text = "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]
        ],
        resize_keyboard= True
    )
    sent_message = await message.answer(
        f"üìÖ {time_info}\n\n"
        f"üëã {greeting}, {html.bold(username)}! –Ø–∫—ñ –ø–ª–∞–Ω–∏ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ?\n\n", 
        reply_markup = keyboard
    )


@dp.message(F.text =="üìä –ö—É—Ä—Å –≤–∞–ª—é—Ç")
async def currency(message: Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard = [
            [KeyboardButton(text = "üí≤ –û—Ç—Ä–∏–º–∞—Ç–∏ –∫—É—Ä—Å –≤–∞–ª—é—Ç–∏")],
            [KeyboardButton(text = "‚¨Ö –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard = True
    )
    await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é:", reply_markup = keyboard)

async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())

